Output Usage
------------

* use output in the config logging part
* add trace output calls all over the place

Sequences Creates
-----------------

* implement the virtual functions of each stage sequence (as per compiler
  errors)

Connector Creates
-----------------

* object definitions
* the create_pipe / x_terminator funtions in pipeline_data
* stuff from para (it's still in the old prototype)

Pipeline Algorithms
-------------------

* fix the progressive buffer stack thing (section and progressive_buffer)
* check the section block check mess (but it's prolly pretty hard to organise
  without having working output)

Socket and State
-----------------

* design player state
* implement basic socket communication

Plugins
-------

* implement input and output stages
* properly deal with the design for loading built and shared object plugins

Problems
--------

* player state (e.g playlist including restoring state data)
  - this is the integration of socket and pipeline
* client communication (i.e saying when something has changed)
  - as above, but it's something that should be thought about in the socket
    proto anyway
  - issues with blocking: how do you mix communication over shared memory (i.e
    the thread pipe) and with a socket
* mono-threading the socket server (might be that the client communication and
  playlist stuff mean that it may as well sit in the same thread)
  - integration of socket and pipeline (perhaps it can be an observer plugin?)
  - this has implications for the player state because multi-threaded access
    will be more tricky
* loading plugin shared objects (probably will be covered in part by
  config-proto)
  - this is the integration of pipeline and config
* method of debugging the pipeline without being threaded (it's not even
  compiled yet so it's bound to have bugs!)
  - a helper program to load, run, and benchmark a plugin.  Perhaps a special
    mode of nerve?
