Prototype Integration
----------------------

* make config compilable
* config should use a general logging abstraction

Pipeline Initialisation
-----------------------

* implement the pipeline::configure function

Socket and State
-----------------

* design player state
* implement basic socket communication

Problems
--------

* logging output or similar -- view data in other words
* player state (e.g playlist including restoring state data)
  - this is the integration of socket and pipeline
* client communication (i.e saying when something has changed)
  - as above, but it's something that should be thought about in the socket
    proto anyway
  - issues with blocking: how do you mix communication over shared memory (i.e
    the thread pipe) and with a socket
* mono-threading the socket server (might be that the client communication and
  playlist stuff mean that it may as well sit in the same thread)
  - integration of socket and pipeline (perhaps it can be an observer plugin?)
  - this has implications for the player state because multi-threaded access
    will be more tricky
* loading plugin shared objects (probably will be covered in part by
  config-proto)
  - this is the integration of pipeline and config
* method of debugging the pipeline without being threaded (it's not even
  compiled yet so it's bound to have bugs!)
