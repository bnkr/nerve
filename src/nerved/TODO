Working Pipeline
----------------

Implement the thread-to-thread communications including some simple input and
output plugins.  This will help us get the socket stuff done (see notes below).

.output
* write a file-dump plugin
* use the configuration to say what file

.input
* write the ffmpeg input
* use the existing wrapper, but we'll need to dick around with it a bit to make
  it more stateful

.thread pipe
* add para to git
* implement the stub methods of thread_pipe
* fully implement the packet class

.state
* hack anything up to pass a load event to the input plugin

End result: packets are passed down the pipeline until eof.

Socket and State
----------------

This is becoming very important because of the way the socket server must
interract with the pipeline.  It has implications on how the terminators are to
work at the very least.

.state data
* must facilitate shared communication between pipeline and server
* the most simple thing is to put it in the server; that way there is only ever
  one updator and the pipeline only has to care about events
* it looks like the most sensible place to put it is in a player::state class.
  This way we can keep knowledge to a minimum between each component.

.state modification
* from pipeline to server: timestamps, files, other things...?
  - communicating with the output plugin (perhaps others?)
  - therefore the server must read from an event queue somehow
* mostly from the output plugins and observers
* from server to pipeline: track changes, skips etc.
  - involves communicating with the start terminator
  - therefore the server must write to an event queue
* re threading, these queue reads must be virtual
  - we can use the stuff in output plugin's outputter
* I think I need to do the thread-to-thread communication bits before this

.request/response
* clients can sign up, but we need a proper protocol for commands and a
  definition of all available commands
* if we're sending back state data, how can we ensure still be asynchronus while
  ensuring that the data does not change (either from another session or due to
  multi-threaded concerns)?
* I think a lockless algorithm would be the most sensible so we can, e.g, keep
  re-evaluating the playlist if it changes.

.multicast
* we can't have each session doing broadcasting individually because then
  messages would only be sent when the socket becomes active.  By definition, a
  boadcast is sent at the behest of the server.
* we can just hold a list of sessions and iterte them, doing the message
  sending as we go.
* what do you do when sending to a server which is in the middle of replying
  to some other action?  Can that even happen?
* how does the server listen for pipeline events while also dealing with for
  poll?
  - if it's in the same thread as whatever sends the events then it's easy
    enough to just check whether an event has been sent or not
  - if it's not then the event sender will need to wake up the socket listener
    somehow

.threading
* could the server exist in the same thread as everything else?
* it hasn't really been designed that way but I suppose it could be done
* seems somehow messy to me... not sure why.
* player::run can probably organise everything into the same thread... but how
  would the user say so?
* server has to deal with events anyway so why shouln't it go on the pipeline?

Pipeline Algorithms
-------------------

This is required for correct operation, but isn't testable anyway until we have
real output.

* fix the progressive buffer stack thing (section and progressive_buffer)
* check the section block check mess (but it's prolly pretty hard to organise
  without having working output)

Plugins
-------

* plan a way to get the stage type from a plugin for config
* modify stage_config's category stuff to use the plugin's data
* move stage_data object into config to implement this method
* modify stages::create_x to load a plugin properly

Build System
------------

* re-write asciidoc using proper new conventions
  - this is urgent for most projects
  - no point doing hacks to assign programs etc; just find the base a2x binary
    and assume the rest of the toolchain is there.
* add a hacked up nsis installed
  - btest wants this too

Problems
--------

* method of debugging the pipeline without being threaded (it's not even
  compiled yet so it's bound to have bugs!)
  - a helper program to load, run, and benchmark a plugin.  Perhaps a special
    mode of nerve?
* gradual initialisation of pipeline objects creates lots of messyness, but it's
  difficult to see exactly how we'd improve on it without doing massive amounts
  of allocation and indirect pointer storage
* section buffering stuff etc.
  - it's still not totally clear whether the current section algorithm is right.
  - it avoids duplicate checks and input handling but incurrs the cost of the
    virtual connector implementation
  - the sequences can always guarantee zero or one packets returned
  - we need to know whether a sequence is buffering regardles of whether we use
    virtual connectors or not
  - therefore, the decision is virtual calls vs. several extra comparisons
    (return, buffering, output events, possily input events)
  - it's possible we could specialise sections when there are sequences which
    never buffer in either implementation
  - this is really a performance issue and needs to be properly benchmarked
