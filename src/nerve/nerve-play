#!/usr/bin/ruby -w
# Copyright (C) 2011, James Webber.
# Distributed under a 3-clause BSD license.  See COPYING.
#
# This is a simple CLI client for nerved.
require 'socket'
require 'optparse'

module NervePlay
  # Console-ready exception
  SettingsError = Class.new(RuntimeError)

  CliExit = Class.new(RuntimeError)

  class Settings
    GotoHelp = Class.new(RuntimeError)

    def initialize(args)
      @mode = nil
      @file = nil

      commands =
        [:add, :remove, :replace, :clear, :list] +
        [:play, :pause, :stop, :seek, :next, :previous] +
        [:volume, :mute]  +
        [:status, :help]

      begin
        op = OptionParser.new
        op.on("--help") { @help = true ; raise GotoHelp }
        words = op.parse(args)
        command = words[0] || cli_fail("no command given")
        others = words[1..-1]

        #lolhax
        cp = OptionParser.new
        commands.each {|c| cp.on("--#{c}") { @mode = c } }

        begin
          cp.parse(["--#{command}"])
        rescue OptionParser::InvalidOption
          msg = "command '#{command}' not recognised"

          if command =~ /^--/
            msg += " (note that dash arguments always come after the command)"
          end

          cli_fail(msg)
        end
      rescue GotoHelp
        raise CliExit
      end

      ap = OptionParser.new

      if add?
        ap.on("-p", "--play")
      else
        #etc
      end

      ap.parse(others)
    end

    def file; @file; end

    def quit?; @mode == :quit; end
    def queue?; @mode == :queue; end
    def bye?; @mode == :bye; end

    def cli_fail(msg)
      raise SettingsError, msg
    end
  end

  class CommandLine
    def initialize(argv)
      @argv = argv
    end

    # Output exception info and do the exit codes.
    def run!
      begin
        run_errorless
      rescue CliExit => e
        Kernel.exit(if e.code == 0 then 0 else 2 end)
      rescue SettingsError => e
        STDERR.puts "#{File.basename($0)}: #{e}"
        Kernel.exit 1
      rescue Exception => e
        STDERR.puts "#{File.basename($0)}: bug: unexpected error:"
        print_exception(e)
        Kernel.exit 2
      end
    end

    def print_exception(e)
      # TODO:
      #   I do tis a lot.  It should go in rbunker.
      STDERR.puts "Class: #{e.class}"
      STDERR.puts "Message: #{e.message}"
      STDERR.puts "Trace:"
      STDERR.puts "> #{e.backtrace.join("\n* ")}"
    end

    # Don't handle exceptions
    def run_errorless
      @settings = Settings.new(@argv)
      socket = UNIXSocket.new("/tmp/nerve.socket")

      if @settings.quit?
        socket.write("MADAGASCAR")
      elsif @settings.queue?
        socket.write("STATUS")
        socket.read
      elsif @settings.bye?
        #  socket.write("BYE")
        #  socket.write("pants")
        p socket.read(1024)
        p socket.read
      else
        fail "no command set"
      end

    end
  end
end

NervePlay::CommandLine.new(ARGV).run!
